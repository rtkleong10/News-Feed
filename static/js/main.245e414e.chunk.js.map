{"version":3,"sources":["index.js"],"names":["NewsFeed","props","_this","Object","_Users_tiffanyleong_Documents_For_Fun_Code_Web_Dev_News_Feed_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_tiffanyleong_Documents_For_Fun_Code_Web_Dev_News_Feed_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_tiffanyleong_Documents_For_Fun_Code_Web_Dev_News_Feed_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","currentSource","sources","currentCategory","categories","onChangeSource","bind","_Users_tiffanyleong_Documents_For_Fun_Code_Web_Dev_News_Feed_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","onChangeCategory","newSourceName","source","sourceName","setState","newCategoryName","category","categoryName","url","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","Filter","ArticleList","currentSourceName","React","Component","sourceNames","categoryNames","push","SourceFilter","CategoryFilter","_this2","e","target","value","options","forEach","name","key","htmlFor","id","onChange","_this3","_this4","articleItems","loading","$","ajax","type","dataType","success","data","getElementsByTagName","error","xhr","status","err","console","toString","fetchDataFromUrl","nextProps","articles","i","length","article","title","children","textContent","Article","description","aStartPos","search","descriptionArr","textSeg","substring","link","text","targetPos","aEndPos","aStartBracketPos","href","rel","date","dateAndDescription","split","escapeLinks","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.245e414e.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport $ from 'jquery';\nimport './css/styles.css';\n\n// Currently supports The Straits Times & Channel New Asia\n\n// RSS feed format for the different sources //////////////////////////////////////////////////////////////////////////////////////\n\n\n// Variables //////////////////////////////////////////////////////////////////////////////////////\n\n// Format:\n// sources is an array of \"source\"s (object literal)\n// A source is an object literal which contains the properties sourceName (string) & categories (array)\n// categories is an array that contains \"category\"s (object literal)\n// A category is an object literal which contains the properties categoryName (string) & url (string) (link to the RSS feed)\nvar sources = [\n\t{\n\t\tsourceName: \"Straits Times\",\n\t\tcategories: [\n\t\t\t{\n\t\t\t\tcategoryName: \"Lifestyle\",\n\t\t\t\turl: \"http://www.straitstimes.com/news/lifestyle/rss.xml\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tcategoryName: \"Politics\",\n\t\t\t\turl: \"http://www.straitstimes.com/news/politics/rss.xml\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tcategoryName: \"Forum\",\n\t\t\t\turl: \"http://www.straitstimes.com/news/forum/rss.xml\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tcategoryName: \"Business\",\n\t\t\t\turl: \"http://www.straitstimes.com/news/business/rss.xml\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tcategoryName: \"Opinion\",\n\t\t\t\turl: \"http://www.straitstimes.com/news/opinion/rss.xml\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tcategoryName: \"Asia\",\n\t\t\t\turl: \"http://www.straitstimes.com/news/asia/rss.xml\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tcategoryName: \"Multimedia\",\n\t\t\t\turl: \"http://www.straitstimes.com/news/multimedia/rss.xml\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tcategoryName: \"Sport\",\n\t\t\t\turl: \"http://www.straitstimes.com/news/sport/rss.xml\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tcategoryName: \"Singapore\",\n\t\t\t\turl: \"http://www.straitstimes.com/news/singapore/rss.xml\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tcategoryName: \"Tech\",\n\t\t\t\turl: \"http://www.straitstimes.com/news/tech/rss.xml\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tcategoryName: \"World\",\n\t\t\t\turl: \"http://www.straitstimes.com/news/world/rss.xml\"\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\tsourceName: \"Channel News Asia\",\n\t\tcategories: [\n\t\t\t{\n\t\t\t\tcategoryName: \"Latest News\",\n\t\t\t\turl: \"http://www.channelnewsasia.com/rssfeeds/8395986\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tcategoryName: \"Asia Pacific\",\n\t\t\t\turl: \"http://www.channelnewsasia.com/rssfeeds/8395744\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tcategoryName: \"Business\",\n\t\t\t\turl: \"http://www.channelnewsasia.com/rssfeeds/8395954\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tcategoryName: \"Singapore\",\n\t\t\t\turl: \"http://www.channelnewsasia.com/rssfeeds/8396082\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tcategoryName: \"Sport\",\n\t\t\t\turl: \"http://www.channelnewsasia.com/rssfeeds/8395838\"\n\t\t\t}\n\t\t]\n\t}\n];\n\n\n// Components /////////////////////////////////////////////////////////////////////////////////////\n\n// App Hierarchy\n// \t- NewsFeed (stateful)\n// \t\t- Filter (stateless)\n// \t\t\t- SourceFilter (stateless)\n// \t\t\t- CategoryFilter (stateless)\n// \t\t- ArticleList (stateful)\n// \t\t\t- Article (stateless)\n\n\n// NewsFeed contains the whole app\nclass NewsFeed extends React.Component {\n\t// State: currentSource & currentCategory contain the source & category currently selected respectively (object literals)\n\t// By default its the first item which is the same default displayed by the select element\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcurrentSource: this.props.sources[0],\n\t\t\tcurrentCategory: this.props.sources[0].categories[0]\n\t\t}\n\n\t\tthis.onChangeSource = this.onChangeSource.bind(this);\n\t\tthis.onChangeCategory = this.onChangeCategory.bind(this);\n\t}\n\n\t// Event Handlers\n\t// onChangeSource & onChangeCategory are event handlers which will be passed to the select element in SourceFilter & CategoryFilter respectively\n\t// They take in the strings representing the source & category as that's the only information available to those components\n\t// These functions will search the arrays of sources & categories to find the object literal matching the string & will update the state to them\n\t// onChangeSource will also set the currentCategory to the first category for the newly selected source\n\tonChangeSource(newSourceName) {\n\t\tvar sources = this.props.sources;\n\n\t\tfor(let source in sources) {\n\n\t\t\tlet sourceName = sources[source].sourceName;\n\n\t\t\tif(sourceName === newSourceName) {\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tcurrentSource: sources[source],\n\t\t\t\t\tcurrentCategory: sources[source].categories[0]\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t}\n\t}\n\n\tonChangeCategory(newCategoryName) {\n\t\tvar categories = this.state.currentSource.categories;\n\n\t\tfor(let category in categories) {\n\n\t\t\tlet categoryName = categories[category].categoryName;\n\n\t\t\tif(categoryName === newCategoryName) {\n\n\t\t\t\tthis.setState({currentCategory: categories[category]});\n\n\t\t\t}\n\n\t\t}\n\t}\n\n\t// Renders Filter & ArticleList\n\t// Filter's attributes: sources, currentSource, onChangeSource (to pass to SourceFilter), onChangeCategory (to pass to CategoryFilter)\n\t// ArticleList's attributes: url, currentSourceName (to pass to the article for it to know how to interpret the RSS feed)\n\t\n\t// Styling (refer to src/styles.css for more)\n\t// header & section is used to separate the header (title & Filter) from the body (ArticleList)\n\t// .container is used for containing the elements, so that they can be styled to be in the center with padding\n\trender() {\n\t\tvar sources = this.props.sources;\n\t\tvar url = this.state.currentCategory.url;\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<header>\n\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t<h1>News Feed</h1>\n\t\t\t\t\t\t<Filter sources={sources} currentSource={this.state.currentSource} onChangeSource={this.onChangeSource} onChangeCategory={this.onChangeCategory}/>\n\t\t\t\t\t</div>\n\t\t\t\t</header>\n\t\t\t\t<section>\n\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t<ArticleList url={url} currentSourceName={this.state.currentSource.sourceName}/>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// Filter contains the select elements which act as filters (sourceFilter & categoryFilter)\nclass Filter extends React.Component {\n\n\t// Renders SourceFilter & CategoryFilter\n\t// SourceFilter's attributes: sourceNames, onChangeSource\n\t// CategoryFilter's attributes: categoryNames, onChangeCategory, currentSourceName (for the key for each option to distinguish between categories of the same name belonging to different sources)\n\trender() {\n\t\t// Generation of sourceNames & categoryNames arrays by iterating throught through the sources array\n\t\tvar sources = this.props.sources;\n\t\tvar sourceNames = [];\n\t\tvar categoryNames = [];\n\n\t\t// Looking through each source\n\t\tfor(let source in sources) {\n\n\t\t\tlet sourceName = sources[source].sourceName;\n\t\t\tsourceNames.push(sourceName);\n\n\t\t\t// Loooking through each category of the currently selected source\n\t\t\tif(sourceName === this.props.currentSource.sourceName) {\n\n\t\t\t\tlet categories = sources[source].categories;\n\n\t\t\t\tfor(let category in categories) {\n\n\t\t\t\t\tlet categoryName = categories[category].categoryName;\n\t\t\t\t\tcategoryNames.push(categoryName);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<SourceFilter sourceNames={sourceNames} onChangeSource={this.props.onChangeSource} />\n\t\t\t\t<CategoryFilter categoryNames={categoryNames} onChangeCategory={this.props.onChangeCategory} currentSourceName={this.props.currentSource.sourceName}/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// SourceFilter is used to select the source\nclass SourceFilter extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.onChangeSource = this.onChangeSource.bind(this);\n\t}\n\n\t// Uses the onChangeSource function to update the state.currentSource of NewsFeed\n\tonChangeSource(e) {\n\t\tthis.props.onChangeSource(e.target.value);\n\t}\n\n\t// Renders a \"Source: \" label & a select element with the source options\n\t// Changing the source option selected will activate the event onChangeSource\n\t// Value & text of option elements are both the sourceName\n\trender() {\n\t\t// Creating the option elements\n\t\tvar sourceNames = this.props.sourceNames;\n\t\tvar options = [];\n\n\t\tsourceNames.forEach(function(sourceName) {\n\n\t\t\toptions.push(<option name={sourceName} key={sourceName}>{sourceName}</option>);\n\n\t\t});\n\n\t\treturn (\n\t\t\t<div className=\"filter-group\">\n\t\t\t\t<label htmlFor=\"sourceNames\">Source: </label>\n\t\t\t\t<select id=\"sourceNames\" name=\"sourceNames\" onChange={this.onChangeSource}>\n\t\t\t\t\t{options}\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// CategoryFilter is used to select the category\nclass CategoryFilter extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.onChangeCategory = this.onChangeCategory.bind(this);\n\t}\n\n\t// Uses the onChangeCategory function to update the state.currentCategory of NewsFeed\n\tonChangeCategory(e) {\n\t\tthis.props.onChangeCategory(e.target.value);\n\t}\n\n\t// Renders a \"Category: \" label & a select element with the category options\n\t// Changing the category option selected will activate the event onChangeCategory\n\t// Value & text of option elements are both the categoryName\n\trender() {\n\t\t// Creating the option elements\n\t\tvar currentSourceName = this.props.currentSourceName;\n\t\tvar categoryNames = this.props.categoryNames;\n\t\tvar options = [];\n\n\t\tcategoryNames.forEach(function(categoryName) {\n\t\t\t// Key combines source name & category name to ensure that categories belonging to different sources with the same name can be distinguished from each other\n\t\t\toptions.push(<option name={categoryName} key={currentSourceName + \" \" + categoryName}>{categoryName}</option>);\n\n\t\t});\n\n\t\treturn (\n\t\t\t<div className=\"filter-group\">\n\t\t\t\t<label htmlFor=\"categoryNames\">Category: </label>\n\t\t\t\t<select id=\"categoryNames\" name=\"categoryNames\" onChange={this.onChangeCategory}>\n\t\t\t\t\t{options}\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// ArticleList fetches the RSS feed & loads the \"Article\"s\nclass ArticleList extends React.Component {\n\t// State: articleItems contains an array containing the \"item\"s from the RSS feed\n\t// By default its an empty array\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tarticleItems: [],\n\t\t\tloading: true\n\t\t};\n\n\t}\n\n\t// Fetches the RSS feed from the RSS feed url & adds the items to this.state.articleItems\n\t// Currently uses https://cors-anywhere.herokuapp.com/ to avoid cors problems, but I need to figure out an alternative\n\tfetchDataFromUrl(url) {\n\t\t$.ajax({\n\n\t\t\ttype: \"GET\",\n\t\t\turl: \"https://cors-anywhere.herokuapp.com/\" + url,\n\t\t\tdataType: \"xml\" ,\n\n\t\t\tsuccess: function(data) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tarticleItems: data.getElementsByTagName(\"item\"),\n\t\t\t\t\tloading: false\n\t\t\t\t});\n\t\t\t}.bind(this),\n\n\t\t\terror: function(xhr, status, err) {\n\t\t\t\tconsole.error(url, status, err.toString());\n\t\t\t}\n\n\t\t});\n\t}\n\n\t// componentDidMount & componentWillReceiveProps both call fetchDataFromUrl to ensure that the this.state.articleItems is updated with every render\n\t// Since fetchDataFromUrl calls an ajax method & this.setState, it may take some time between the initial render before the \"article\"s are loaded\n\t// These methods are used as they are called before the render & allow this.setState to be called\n\tcomponentDidMount() {\n\t\tthis.fetchDataFromUrl(this.props.url);\n\t}\n\n\tcomponentWillReceiveProps(nextProps) {\n\t\tif(this.props !== nextProps) { // To ensure that the props are updated to avoid excessive fetching\n\t\t\tthis.setState({loading: true});\n\t\t\tthis.fetchDataFromUrl(nextProps.url);\n\n\t\t}\n\t}\n\n\t// Renders either an error message if there are no articles found or an array of the \"Article\"s\n\t// Article's attributes: article, currentSourceName (for it to know how to interpret the RSS feed), key\n\n\t// Style\n\t// If there are articles, they are put in a div with the class .article-list\n\trender() {\n\n\t\t// Loading\n\t\tif (this.state.loading) {\n\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<div className=\"loader\"></div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\n\t\t// Creating the article components\n\t\tvar articleItems = this.state.articleItems;\n\t\tvar articles = [];\n\n\t\tfor(let i = 0; i < articleItems.length; i++) {\n\n\t\t\tvar article = articleItems[i];\n\t\t\tvar title = article.children[0].textContent;\n\t\t\tarticles.push(<Article article={article} currentSourceName={this.props.currentSourceName} key={title}/>)\n\n\t\t}\n\n\t\tif (articles.length === 0) {\n\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<p>Sorry, no articles found for that category.</p>\n\t\t\t\t</div>\n\t\t\t);\n\n\t\t} else {\n\n\t\t\treturn (\n\t\t\t\t<div className=\"article-list\">\n\t\t\t\t\t{articles}\n\t\t\t\t</div>\n\t\t\t);\n\n\t\t}\n\t}\n}\n\n// Article displays each article item in the RSS feed\nclass Article extends React.Component {\n\n\t// Convert to an array of links & text\n\tescapeLinks(description) {\n\n\t\t// <a href=\";\n\t\tvar aStartPos = description.search(\"<a\"); // Next\n\t\tvar descriptionArr = [];\n\t\tvar key = 0;\n\n\t\t// Contains links\n\t\tif (aStartPos !== -1) {\n\n\t\t\twhile (aStartPos !== -1) {\n\n\t\t\t\t// Add text segment if any\n\t\t\t\tvar textSeg = description.substring(0, aStartPos);\n\t\t\t\tif(aStartPos !== 0) descriptionArr.push(textSeg);\n\n\t\t\t\t// Establishing Positions\n\t\t\t\tvar targetPos = description.search(\"target\");\n\t\t\t\tvar aEndPos = description.search(\"</a>\");\n\n\t\t\t\t// Adding the a tag\n\t\t\t\t// e.g. <a href=\"https://www.straitstimes.com/singapore/health/ip-insurers-losses-raise-possibility-of-premium-hikes\" target=\"_blank\">IP insurers' losses raise </a>\n\t\t\t\tvar link, text;\n\n\t\t\t\tif (targetPos !== -1 && targetPos < aEndPos) { // Contains target\n\n\t\t\t\t\tlink = description.substring(aStartPos + 9, targetPos - 2);\n\t\t\t\t\ttext = description.substring(targetPos + 16, aEndPos);\n\n\t\t\t\t} else { // Doesn;t contain target\n\n\t\t\t\t\tvar aStartBracketPos = description.search(\">\");\n\n\t\t\t\t\tlink = description.substring(aStartPos + 9, aStartBracketPos - 1);\n\t\t\t\t\ttext = description.substring(aStartBracketPos + 1, aEndPos);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdescriptionArr.push(<a href={link} target=\"_blank\" key={key} rel=\"noopener noreferrer\">{text}</a>);\n\n\t\t\t\t// Trim a tag\n\t\t\t\tdescription = description.substring(aEndPos + 4);\n\n\t\t\t\t// Update counters\n\t\t\t\taStartPos = description.search(\"<a\");\n\t\t\t\tkey++;\n\t\t\t}\n\n\t\t\t// Add text segment if any\n\t\t\tif(description !== \"\") descriptionArr.push(description);\n\t\t\treturn descriptionArr;\n\n\t\t// No links\n\t\t} else {\n\n\t\t\tdescriptionArr.push(description);\n\t\t\treturn descriptionArr;\n\t\t}\n\n\t}\n\n\t// Renders a title (linked), date & description\n\trender() {\n\t\tvar article = this.props.article;\n\t\tvar title = article.getElementsByTagName(\"title\")[0].textContent;\n\t\tvar link = article.getElementsByTagName(\"link\")[0].textContent;\n\t\tvar date, description, descriptionArr;\n\n\t\t// Handling the different RSS feed formatting\n\t\tswitch(this.props.currentSourceName) {\n\n\t\t\tcase \"Straits Times\":\n\t\t\t\tlet dateAndDescription = article.getElementsByTagName(\"description\")[0];\n\t\t\t\tif(dateAndDescription != null) {\n\n\t\t\t\t\tdate = dateAndDescription.textContent.split(\"<br /><br />\")[0];\n\t\t\t\t\tdescription = dateAndDescription.textContent.split(\"<br /><br />\")[1];\n\t\t\t\t\tdescriptionArr = this.escapeLinks(description);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"Channel News Asia\":\n\t\t\t\tdate = article.getElementsByTagName(\"pubDate\")[0].textContent;\n\t\t\t\tif(article.getElementsByTagName(\"description\")[0] != null) {\n\n\t\t\t\t\tdescription = article.getElementsByTagName(\"description\")[0].textContent;\n\t\t\t\t\tdescriptionArr = this.escapeLinks(description);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"article\">\n\t\t\t\t<a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\t<h2>{title}</h2>\n\t\t\t\t</a>\n\t\t\t\t<p><small>{date}</small></p>\n\t\t\t\t<p>{descriptionArr}</p>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\n// ReactDOM render ////////////////////////////////////////////////////////////////////////////////\n\nReactDOM.render(<NewsFeed sources={sources}/>, document.getElementById('root'));"],"sourceRoot":""}